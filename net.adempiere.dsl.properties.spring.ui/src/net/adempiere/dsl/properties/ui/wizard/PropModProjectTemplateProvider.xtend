/*
 * generated by Xtext 2.14.0
 */
package net.adempiere.dsl.properties.ui.wizard


import org.eclipse.core.runtime.Status
import org.eclipse.jdt.core.JavaCore
import org.eclipse.xtext.ui.XtextProjectHelper
import org.eclipse.xtext.ui.util.PluginProjectFactory
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

import static org.eclipse.core.runtime.IStatus.*

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class PropModProjectTemplateProvider implements IProjectTemplateProvider {
	override getProjectTemplates() {
		#[new PropModelMavenBuildProject]
	}
}

@ProjectTemplate(
	label="Properties Model with Maven build"
	, icon="project_template.png"
	, description="<p><b>Properties Model with Maven build</b></p>
<p>This is a parameterized hello world for PropMod. You can set a parameter to modify the content in the generated file
and a parameter to set the package the file is created in.</p>")
final class PropModelMavenBuildProject {
	val MAVEN_POM_FILE_CONTENTS = 
'''
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>demo</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<!--version>2.0.1.Final</version-->
		</dependency>
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
</project>
'''

	val advancedCheckBox = check("Advanced:", false)
	val advancedGroup = group("Properties")
	val name = combo("Name:", #["Xtext", "World", "Foo", "Bar"], "The name to say 'Hello' to", advancedGroup)
	val path = text("Package:", "mydsl", "The package path to place the files in", advancedGroup)

	override protected updateVariables() {
		name.enabled = advancedCheckBox.value
		path.enabled = advancedCheckBox.value
		if (!advancedCheckBox.value) {
			name.value = "Xtext"
			path.value = "propsModel"
		}
	}

	override protected validate() {
		if (path.value.matches('[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*'))
			null
		else
			new Status(ERROR, "Wizard", "'" + path + "' is not a valid package name")
	}

	override generateProjects(IProjectGenerator generator) {
		generator.generate(new PluginProjectFactory => [
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			
			// @Trifon
//			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID]
			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID, "org.eclipse.m2e.core.maven2Nature"]

			// @Trifon
//			builderIds += JavaCore.BUILDER_ID
			builderIds += #[JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID, "org.eclipse.m2e.core.maven2Builder"]

//			folders += "src"
			folders += #["src/main/java", "src/main/resources", "src/test/java", "src/test/resources", "src-gen"]

			// @Trifon
			addFile('''/pom.xml''', MAVEN_POM_FILE_CONTENTS)

			addFile('''src/main/model-properties/MainProperties.propsModel''', '''
				/*
				 * This is an example Properties Model
				 * name = «name»;
				*/
				package net.adempiere.example;
			''')
		])
	}
}
