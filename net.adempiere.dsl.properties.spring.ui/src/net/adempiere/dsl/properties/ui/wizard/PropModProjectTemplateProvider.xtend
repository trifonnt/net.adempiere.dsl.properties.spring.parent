/*
 * generated by Xtext 2.14.0
 */
package net.adempiere.dsl.properties.ui.wizard


import org.eclipse.core.runtime.Status
import org.eclipse.jdt.core.JavaCore
import org.eclipse.xtext.ui.XtextProjectHelper
import org.eclipse.xtext.ui.util.PluginProjectFactory
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

import static org.eclipse.core.runtime.IStatus.*

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class PropModProjectTemplateProvider implements IProjectTemplateProvider {
	override getProjectTemplates() {
		#[new PropModelMavenBuildProject]
	}
}

@ProjectTemplate(
	label="Properties Model with Maven build"
	, icon="project_template.png"
	, description="<p><b>Properties Model with Maven build</b></p>
<p>This is a parameterized hello world for PropMod. You can set a parameter to modify the content in the generated file
and a parameter to set the package the file is created in.</p>")
final class PropModelMavenBuildProject {
	val MAVEN_POM_FILE_CONTENTS = 
'''
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>demo</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<!--version>2.0.1.Final</version-->
		</dependency>
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
</project>
'''

	val advancedCheckBox = check("Advanced:", false)
	val artifactGroup = group("Artifact")
//	val name = combo("Name:", #["Xtext", "World", "Foo", "Bar"], "The name to say 'Hello' to", advancedGroup)
//	val path = text("Package:", "mydsl", "The package path to place the files in", advancedGroup)
	//@Trifon
	val groupId = text("Group Id:", "net.adempiere.dsl.example", "Project Group ID", artifactGroup)
	val artifactId = text("Artifact Id:", "example-dsl-prop-model", "Project Artifact ID", artifactGroup)
	val version = text("Version:", "0.0.1-SNAPSHOT", "Project Version", artifactGroup)
//	val name = text("Name:", "Example PropsModel Project", "Project Name", artifactGroup)
	val description = text("Description:", "Example PropsModel Project description", "Project Description", artifactGroup)
	val packageName = text("Java Package:", "net.adempiere.dsl.example", "Java Package", artifactGroup)
 	var packageNameEscaped = packageName.value.replaceAll(".", "/")

	override protected updateVariables() {
		groupId.enabled = advancedCheckBox.value
		artifactId.enabled = advancedCheckBox.value
		version.enabled = advancedCheckBox.value
//		name.enabled = advancedCheckBox.value
		description.enabled = advancedCheckBox.value
		packageName.enabled = advancedCheckBox.value

		if (!advancedCheckBox.value) {
			groupId.value = "net.adempiere.example"
			artifactId.value = "example-prop-model"
			version.value = "0.0.1-SNAPSHOT"
//			name.value = "Example PropsModel Project"
//			description.value = "Example PropsModel Project Description"
			packageName.value = "net.adempiere.dsl.example"
		}
		packageNameEscaped = packageName.value.replaceAll("\\.", "/")
	}

	override protected validate() {
		// [a-z]+ --> matches at least one char!
		// [a-z]* --> matches empty string too! 

		if (groupId.value.matches('[a-z][a-z0-9_]*(\\.[a-z][a-z0-9_-]*)*([0-9a-z])+')) {
			// null
		} else {
			new Status(ERROR, "Wizard", "'" + groupId + "' is not a valid Group ID")
		}

		if (artifactId.value.matches('[a-z][a-z0-9_]*(\\.[a-z][a-z0-9_-]*)*([0-9a-z])+')) {
			// null
		} else {
			new Status(ERROR, "Wizard", "'" + artifactId + "' is not a valid Artifact ID")
		}

		if (version.value.matches('[0-9_]*(\\.[0-9a-zA-Z][0-9a-zA-Z_-]*)*([0-9a-zA-Z])*')) {
			// null
		} else {
			new Status(ERROR, "Wizard", "'" + version + "' is not a valid Version")
		}
	}

	override generateProjects(IProjectGenerator generator) {
		generator.generate(new PluginProjectFactory => [
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			
			// @Trifon
//			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID]
			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID, "org.eclipse.m2e.core.maven2Nature"]

			// @Trifon
//			builderIds += JavaCore.BUILDER_ID
			builderIds += #[JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID, "org.eclipse.m2e.core.maven2Builder"]

//			folders += "src"
			folders += #["src/main/java", "src/main/resources", "src/test/java", "src/test/resources", "src-gen"]

			// @Trifon - TODO - Set Default Output Folder!!!
			// @Trifon
			addFile('''/pom.xml''', MAVEN_POM_FILE_CONTENTS)

addFile('''src/main/resources/application.properties''', '''
application.name=Trifon
application.age=20
''')

addFile('''src/main/java/«packageNameEscaped»/DemoApplication.java''', '''
package «packageName»;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
//import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.ApplicationContext;

import javax.inject.Inject;


@SpringBootApplication
//@EnableConfigurationProperties(ApplicationProperties.class)
public class DemoApplication {

	@Inject
	private ApplicationProperties appProps;

	public static void main(String[] args) {
		ApplicationContext context = SpringApplication.run(DemoApplication.class, args);
		DemoApplication demoAppBean = context.getBean(DemoApplication.class);

		// Example property usage.
		System.err.println("Application property: name=" + demoAppBean.appProps.getName());
	}
}

''')

			addFile('''src/main/model-properties/MainProperties.propsModel''', '''
				/*
				 * This is an example Properties Model
				 * name = «/*name*/»;
				 * 
				 * NOT WORKING YET
				 * projectName = projectName;
				 * location = location;
				 * 
				 * groupId = «groupId»;
				 * artifactId = «artifactId»;
				 * version = «version»;
				 
				 * packageNameEscaped = «packageNameEscaped»
				*/
				package «packageName»;
				
				property String name not-null;
				property int age;
			''')
		])
	}
}
