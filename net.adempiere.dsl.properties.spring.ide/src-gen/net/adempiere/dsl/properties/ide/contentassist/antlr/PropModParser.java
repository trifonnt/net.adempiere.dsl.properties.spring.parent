/*
 * generated by Xtext 2.14.0
 */
package net.adempiere.dsl.properties.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import net.adempiere.dsl.properties.ide.contentassist.antlr.internal.InternalPropModParser;
import net.adempiere.dsl.properties.services.PropModGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class PropModParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PropModGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PropModGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPropertyTypeAccess().getAlternatives(), "rule__PropertyType__Alternatives");
			builder.put(grammarAccess.getPropModelAccess().getGroup(), "rule__PropModel__Group__0");
			builder.put(grammarAccess.getMetadataAccess().getGroup(), "rule__Metadata__Group__0");
			builder.put(grammarAccess.getMetadataAccess().getGroup_3(), "rule__Metadata__Group_3__0");
			builder.put(grammarAccess.getMetadataAccess().getGroup_4(), "rule__Metadata__Group_4__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getPropertyDefinitionAccess().getGroup(), "rule__PropertyDefinition__Group__0");
			builder.put(grammarAccess.getPropModelAccess().getMetaDataAssignment_0(), "rule__PropModel__MetaDataAssignment_0");
			builder.put(grammarAccess.getPropModelAccess().getPropertiesAssignment_1(), "rule__PropModel__PropertiesAssignment_1");
			builder.put(grammarAccess.getMetadataAccess().getPackageNameAssignment_1(), "rule__Metadata__PackageNameAssignment_1");
			builder.put(grammarAccess.getMetadataAccess().getPrefixAssignment_3_1(), "rule__Metadata__PrefixAssignment_3_1");
			builder.put(grammarAccess.getMetadataAccess().getJavaClassNameAssignment_4_1(), "rule__Metadata__JavaClassNameAssignment_4_1");
			builder.put(grammarAccess.getPropertyDefinitionAccess().getTypeAssignment_1(), "rule__PropertyDefinition__TypeAssignment_1");
			builder.put(grammarAccess.getPropertyDefinitionAccess().getNameAssignment_2(), "rule__PropertyDefinition__NameAssignment_2");
			builder.put(grammarAccess.getPropertyDefinitionAccess().getNotNullAssignment_3(), "rule__PropertyDefinition__NotNullAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PropModGrammarAccess grammarAccess;

	@Override
	protected InternalPropModParser createParser() {
		InternalPropModParser result = new InternalPropModParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PropModGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PropModGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
