/**
 * generated by Xtext 2.14.0
 */
package net.adempiere.dsl.properties.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import net.adempiere.dsl.properties.propMod.Metadata;
import net.adempiere.dsl.properties.propMod.PropModel;
import net.adempiere.dsl.properties.propMod.PropertyDefinition;
import net.adempiere.dsl.properties.services.PropModGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class PropModFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private PropModGrammarAccess _propModGrammarAccess;
  
  protected void _format(final PropModel propModel, @Extension final IFormattableDocument document) {
    document.<Metadata>format(propModel.getMetaData());
    EList<PropertyDefinition> _properties = propModel.getProperties();
    for (final PropertyDefinition propertyDefinition : _properties) {
      document.<PropertyDefinition>format(propertyDefinition);
    }
  }
  
  public void format(final Object propModel, final IFormattableDocument document) {
    if (propModel instanceof XtextResource) {
      _format((XtextResource)propModel, document);
      return;
    } else if (propModel instanceof PropModel) {
      _format((PropModel)propModel, document);
      return;
    } else if (propModel instanceof EObject) {
      _format((EObject)propModel, document);
      return;
    } else if (propModel == null) {
      _format((Void)null, document);
      return;
    } else if (propModel != null) {
      _format(propModel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(propModel, document).toString());
    }
  }
}
