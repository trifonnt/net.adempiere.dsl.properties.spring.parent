/*
 * generated by Xtext 2.14.0
 */
package net.adempiere.dsl.properties.serializer;

import com.google.inject.Inject;
import java.util.Set;
import net.adempiere.dsl.properties.propMod.Metadata;
import net.adempiere.dsl.properties.propMod.PropModPackage;
import net.adempiere.dsl.properties.propMod.PropModel;
import net.adempiere.dsl.properties.propMod.PropertyDefinition;
import net.adempiere.dsl.properties.services.PropModGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public abstract class AbstractPropModSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PropModGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PropModPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PropModPackage.METADATA:
				sequence_Metadata(context, (Metadata) semanticObject); 
				return; 
			case PropModPackage.PROP_MODEL:
				sequence_PropModel(context, (PropModel) semanticObject); 
				return; 
			case PropModPackage.PROPERTY_DEFINITION:
				sequence_PropertyDefinition(context, (PropertyDefinition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Metadata returns Metadata
	 *
	 * Constraint:
	 *     (packageName=QualifiedName prefix=STRING? javaClassName=STRING?)
	 */
	protected void sequence_Metadata(ISerializationContext context, Metadata semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PropModel returns PropModel
	 *
	 * Constraint:
	 *     (metaData=Metadata properties+=PropertyDefinition*)
	 */
	protected void sequence_PropModel(ISerializationContext context, PropModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PropertyDefinition returns PropertyDefinition
	 *
	 * Constraint:
	 *     (type=PropertyType name=QualifiedName notNull?='not-null'?)
	 */
	protected void sequence_PropertyDefinition(ISerializationContext context, PropertyDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
