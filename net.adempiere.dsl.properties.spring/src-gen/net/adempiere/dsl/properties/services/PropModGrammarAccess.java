/*
 * generated by Xtext 2.14.0
 */
package net.adempiere.dsl.properties.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PropModGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PropModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.adempiere.dsl.properties.PropMod.PropModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetaDataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetaDataMetadataParserRuleCall_0_0 = (RuleCall)cMetaDataAssignment_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesPropertyDefinitionParserRuleCall_1_0 = (RuleCall)cPropertiesAssignment_1.eContents().get(0);
		
		//PropModel:
		//	metaData=Metadata
		//	properties+=PropertyDefinition*;
		@Override public ParserRule getRule() { return rule; }
		
		//metaData=Metadata properties+=PropertyDefinition*
		public Group getGroup() { return cGroup; }
		
		//metaData=Metadata
		public Assignment getMetaDataAssignment_0() { return cMetaDataAssignment_0; }
		
		//Metadata
		public RuleCall getMetaDataMetadataParserRuleCall_0_0() { return cMetaDataMetadataParserRuleCall_0_0; }
		
		//properties+=PropertyDefinition*
		public Assignment getPropertiesAssignment_1() { return cPropertiesAssignment_1; }
		
		//PropertyDefinition
		public RuleCall getPropertiesPropertyDefinitionParserRuleCall_1_0() { return cPropertiesPropertyDefinitionParserRuleCall_1_0; }
	}
	public class MetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.adempiere.dsl.properties.PropMod.Metadata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPrefixKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPrefixAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPrefixSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cPrefixAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cJavaClassNameKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cJavaClassNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cJavaClassNameSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cJavaClassNameAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//Metadata:
		//	'package' packageName=QualifiedName ';' ('prefix' prefix=STRING ';')? ('java-class-name' javaClassName=STRING ';')? // OPTIONAL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' packageName=QualifiedName ';' ('prefix' prefix=STRING ';')? ('java-class-name' javaClassName=STRING ';')?
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_1_0() { return cPackageNameQualifiedNameParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//('prefix' prefix=STRING ';')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'prefix'
		public Keyword getPrefixKeyword_3_0() { return cPrefixKeyword_3_0; }
		
		//prefix=STRING
		public Assignment getPrefixAssignment_3_1() { return cPrefixAssignment_3_1; }
		
		//STRING
		public RuleCall getPrefixSTRINGTerminalRuleCall_3_1_0() { return cPrefixSTRINGTerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }
		
		//('java-class-name' javaClassName=STRING ';')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'java-class-name'
		public Keyword getJavaClassNameKeyword_4_0() { return cJavaClassNameKeyword_4_0; }
		
		//javaClassName=STRING
		public Assignment getJavaClassNameAssignment_4_1() { return cJavaClassNameAssignment_4_1; }
		
		//STRING
		public RuleCall getJavaClassNameSTRINGTerminalRuleCall_4_1_0() { return cJavaClassNameSTRINGTerminalRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.adempiere.dsl.properties.PropMod.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVALID_IDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cVALID_IDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	VALID_ID ('.' VALID_ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//VALID_ID ('.' VALID_ID)*
		public Group getGroup() { return cGroup; }
		
		//VALID_ID
		public RuleCall getVALID_IDTerminalRuleCall_0() { return cVALID_IDTerminalRuleCall_0; }
		
		//('.' VALID_ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//VALID_ID
		public RuleCall getVALID_IDTerminalRuleCall_1_1() { return cVALID_IDTerminalRuleCall_1_1; }
	}
	public class PropertyDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.adempiere.dsl.properties.PropMod.PropertyDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypePropertyTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cNotNullAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNotNullNotNullKeyword_3_0 = (Keyword)cNotNullAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PropertyDefinition:
		//	'property' type=PropertyType name=QualifiedName notNull?='not-null'? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'property' type=PropertyType name=QualifiedName notNull?='not-null'? ';'
		public Group getGroup() { return cGroup; }
		
		//'property'
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }
		
		//type=PropertyType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//PropertyType
		public RuleCall getTypePropertyTypeEnumRuleCall_1_0() { return cTypePropertyTypeEnumRuleCall_1_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//notNull?='not-null'?
		public Assignment getNotNullAssignment_3() { return cNotNullAssignment_3; }
		
		//'not-null'
		public Keyword getNotNullNotNullKeyword_3_0() { return cNotNullNotNullKeyword_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	
	public class PropertyTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "net.adempiere.dsl.properties.PropMod.PropertyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGStringKeyword_0_0 = (Keyword)cSTRINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTIntKeyword_1_0 = (Keyword)cINTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOOLEANBooleanKeyword_2_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PropertyType:
		//	STRING='String' | INT='int' | BOOLEAN='boolean';
		public EnumRule getRule() { return rule; }
		
		//STRING='String' | INT='int' | BOOLEAN='boolean'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING='String'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_0() { return cSTRINGEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getSTRINGStringKeyword_0_0() { return cSTRINGStringKeyword_0_0; }
		
		//INT='int'
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_1() { return cINTEnumLiteralDeclaration_1; }
		
		//'int'
		public Keyword getINTIntKeyword_1_0() { return cINTIntKeyword_1_0; }
		
		//BOOLEAN='boolean'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_2() { return cBOOLEANEnumLiteralDeclaration_2; }
		
		//'boolean'
		public Keyword getBOOLEANBooleanKeyword_2_0() { return cBOOLEANBooleanKeyword_2_0; }
	}
	
	private final PropModelElements pPropModel;
	private final MetadataElements pMetadata;
	private final TerminalRule tVALID_ID;
	private final QualifiedNameElements pQualifiedName;
	private final PropertyDefinitionElements pPropertyDefinition;
	private final PropertyTypeElements ePropertyType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PropModGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPropModel = new PropModelElements();
		this.pMetadata = new MetadataElements();
		this.tVALID_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.adempiere.dsl.properties.PropMod.VALID_ID");
		this.pQualifiedName = new QualifiedNameElements();
		this.pPropertyDefinition = new PropertyDefinitionElements();
		this.ePropertyType = new PropertyTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("net.adempiere.dsl.properties.PropMod".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PropModel:
	//	metaData=Metadata
	//	properties+=PropertyDefinition*;
	public PropModelElements getPropModelAccess() {
		return pPropModel;
	}
	
	public ParserRule getPropModelRule() {
		return getPropModelAccess().getRule();
	}
	
	//Metadata:
	//	'package' packageName=QualifiedName ';' ('prefix' prefix=STRING ';')? ('java-class-name' javaClassName=STRING ';')? // OPTIONAL
	//;
	public MetadataElements getMetadataAccess() {
		return pMetadata;
	}
	
	public ParserRule getMetadataRule() {
		return getMetadataAccess().getRule();
	}
	
	//terminal VALID_ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9')* ('a'..'z' | 'A'..'Z' | '_' | '0'..'9');
	public TerminalRule getVALID_IDRule() {
		return tVALID_ID;
	}
	
	//QualifiedName:
	//	VALID_ID ('.' VALID_ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//PropertyDefinition:
	//	'property' type=PropertyType name=QualifiedName notNull?='not-null'? ';';
	public PropertyDefinitionElements getPropertyDefinitionAccess() {
		return pPropertyDefinition;
	}
	
	public ParserRule getPropertyDefinitionRule() {
		return getPropertyDefinitionAccess().getRule();
	}
	
	//enum PropertyType:
	//	STRING='String' | INT='int' | BOOLEAN='boolean';
	public PropertyTypeElements getPropertyTypeAccess() {
		return ePropertyType;
	}
	
	public EnumRule getPropertyTypeRule() {
		return getPropertyTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
